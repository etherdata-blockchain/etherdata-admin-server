name: Build Docker Image

on:
  push:
    branches:
      - "main"
      - "dev"
    tags:
      - "**"
  pull_request:
    branches:
      - "main"
      - "dev"

jobs:
  dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "16"
      - run: yarn
      - name: Run linters
        uses: wearerequired/lint-action@v1
        with:
          eslint: true
          prettier: true

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "16"
      - run: yarn install
      - run: yarn test --coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}


  deploy:
    runs-on: ubuntu-latest
    needs: [ test, dependencies ]
    steps:
      - uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=sirily11/etd-remote-admin-server
          VERSION=edge
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=latest
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-single-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-single-buildx

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.prep.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          build-args: |
            APP_ID=${{ secrets.APP_ID }}
            PUBLIC_CLIENT_PASSWORD=${{secrets.PUBLIC_CLIENT_PASSWORD}}
            PUBLIC_STATS_SERVER=${{secrets.PUBLIC_STATS_SERVER}}
            VERSION=${{ steps.prep.outputs.tags }}

  publish-k8s-release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [ deploy ]
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v2

      - name: Deploy to Release
        uses: JamesIves/github-pages-deploy-action@4.1.5
        with:
          branch: k8s-release
          folder: example_configs/k8s

  publish-k8s-dev:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [ deploy ]
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v2
      - name: Deploy to Release
        uses: JamesIves/github-pages-deploy-action@4.1.5
        with:
          branch: k8s-release-dev
          folder: example_configs/k8s